Class {
	#name : #Game,
	#superclass : #Object,
	#instVars : [
		'turnManager',
		'finishLine',
		'board',
		'spaceshipsCardHands',
		'aActiveDeck',
		'dice',
		'spaceships',
		'cellToEnter',
		'spaceshipsWithHyperGravity',
		'anAllyTankManager'
	],
	#category : #'IngSoft2-Model'
}

{ #category : #'instance creation' }
Game class >> numberOfSpaceships: anAmount with: aBoardCreator playWith: aCollectionOfDice andGameDeck: anEffectManager [

	^ self new
		  initializeNumberOfSpaceships: anAmount
		  with: aBoardCreator
		  playWith: aCollectionOfDice
		  andGameDeck: anEffectManager
]

{ #category : #card }
Game >> activateCard: aCard [

	aActiveDeck activate: aCard
]

{ #category : #allyCard }
Game >> ally: spaceshipIdOne with: spaceshipIdTwo [
	
	| spaceshipOne spaceshipTwo |
	
	spaceshipOne := spaceships detectSpaceshipWithId: spaceshipIdOne.
	spaceshipTwo := spaceships detectSpaceshipWithId: spaceshipIdTwo.
	anAllyTankManager ally: spaceshipOne with: spaceshipTwo
]

{ #category : #hyperGravityCard }
Game >> applyHyperGravityOn: aSpaceship withValue: value [
	
	spaceshipsWithHyperGravity at: aSpaceship put: value

	
	
]

{ #category : #movement }
Game >> checkAndHandleFuelDepletion: aSpaceship [

	| spaceshipsWithoutFuel |
	spaceshipsWithoutFuel := anAllyTankManager spaceshipsWithEmptyFuelTank:
		              aSpaceship.
	spaceshipsWithoutFuel do: [ :spaceship |
		turnManager lostTurns: 2 by: spaceship id.
		spaceship resetToOne.
		spaceship loadFuel ]
]

{ #category : #movement }
Game >> checkMoveIsPossible: throwResult for: aSpaceship [

	| positionOfSpaceship aNumberOfMovements |
	aNumberOfMovements := throwResult.
	positionOfSpaceship := aSpaceship position.

	(spaceshipsWithHyperGravity includesKey: aSpaceship) ifTrue: [
		throwResult < (spaceshipsWithHyperGravity at: aSpaceship)
			ifTrue: [
				aNumberOfMovements := 0.
				^ aNumberOfMovements ]
			ifFalse: [ spaceshipsWithHyperGravity removeKey: aSpaceship ] ].

	aNumberOfMovements := positionOfSpaceship
		                      adjustMovementFor: aNumberOfMovements
		                      withLimits: finishLine.

	^ aNumberOfMovements
]

{ #category : #skipCard }
Game >> doubleTurn [

	| currentSpaceship |
	currentSpaceship := turnManager spaceshipPlaying.
	spaceships
		each: [ :spaceship | turnManager lostTurns: 1 by: spaceship id ]
		but: currentSpaceship
]

{ #category : #card }
Game >> giveOneCardTo: aSpaceship [

	(spaceshipsCardHands at: aSpaceship id) gainACard
]

{ #category : #initialization }
Game >> initializeNumberOfSpaceships: anAmount with: aBoardCreator playWith: aCollectionOfDice andGameDeck: anEffectManager [

	aActiveDeck := ActiveDeck startGame.

	finishLine := Position
		              startGameWithCell: aBoardCreator cells
		              andLap: aBoardCreator laps.

	dice := aCollectionOfDice.

	spaceships := CollectionOfSpaceships
		              numberOfSpaceships: anAmount
		              withAmountOfFuel: dice amountOfFaces * 2.

	anAllyTankManager := AllyTankManager manage: spaceships.

	spaceshipsCardHands := (1 to: anAmount) collect: [ :index |
		                       SpaceshipCardHand startGameWith:
			                       anEffectManager ].

	turnManager := TurnManager manage: spaceships.

	spaceshipsWithHyperGravity := Dictionary new.

	board := aBoardCreator createBoard
]

{ #category : #card }
Game >> lastCardPlayed [

	^ aActiveDeck lastCardPlayed
]

{ #category : #cell }
Game >> lastCellEffect [

	^ cellToEnter
]

{ #category : #movement }
Game >> move: spaceship a: numberOfMovements [

	| positionOfSpaceship aNumberOfMovements |
	aNumberOfMovements := self
		                      checkMoveIsPossible: numberOfMovements
		                      for: spaceship.

	positionOfSpaceship := spaceship position.

	anAllyTankManager
		spaceship: spaceship
		wantsToUse: aNumberOfMovements.

	spaceship move: aNumberOfMovements.

	positionOfSpaceship adjustPositionWith: finishLine.

	self checkAndHandleFuelDepletion: spaceship
]

{ #category : #moonWalkCard }
Game >> moveAllTheSpaceshipsExcept: aSpaceship withValueToMove: aNumberOfMovements [

	spaceships
		each: [ :spaceship | self move: spaceship a: aNumberOfMovements ]
		but: aSpaceship
]

{ #category : #movement }
Game >> moveSpaceship [

	| positionOfSpaceship throwResult currentSpaceship |
	throwResult := self throwDiceAndCheckEffects.
	currentSpaceship := turnManager spaceshipPlaying.
	positionOfSpaceship := currentSpaceship position.

	self move: currentSpaceship a: throwResult.

	cellToEnter := board at: positionOfSpaceship cell.
	cellToEnter applyEffectTo: currentSpaceship on: self.

	positionOfSpaceship = finishLine ifTrue: [
		dice := GameOver new.
		^ self spaceships positionsOfSpaceships ].

	turnManager nextTurn
]

{ #category : #movement }
Game >> reloadSpaceship [

	| currentSpaceship |
	currentSpaceship := turnManager spaceshipPlaying.
	currentSpaceship loadFuel.
	currentSpaceship := turnManager nextTurn
]

{ #category : #card }
Game >> removeTheCard: aCardToCancel andSaveTheLastInstantCardPlayed: aCancellationCard [

	aActiveDeck activate: aCancellationCard .
	aActiveDeck removeACard: aCardToCancel
]

{ #category : #atomicBombCard }
Game >> resetSpaceshipsToCellOne [

	spaceships each: [ :spaceship | spaceship resetToOne ]
]

{ #category : #reverseCard }
Game >> reverseTurnOrder [

	turnManager previousTurn.
	turnManager reverseTurnOrder.
	turnManager nextTurn
]

{ #category : #skipCard }
Game >> skipTurn [

	turnManager nextTurn
]

{ #category : #card }
Game >> spaceshipId: anId useInstantCard: aCard toDoEffectFor: anObject [

	| spaceshipCardHand cardInitialized |
	cardInitialized := aCard toDoEffectFor: anObject.
	spaceshipCardHand := spaceshipsCardHands at: anId.
	(spaceshipCardHand use: aCard) ifTrue: [
		cardInitialized activateEffectOn: self forSpaceship: anId ]
]

{ #category : #accessing }
Game >> spaceships [

	^ spaceships 
]

{ #category : #allyCard }
Game >> stopAlly: aSpaceshipId [

	| spaceshipOne |
	spaceshipOne := spaceships detectSpaceshipWithId: aSpaceshipId.
	anAllyTankManager stopAlly: spaceshipOne
]

{ #category : #movement }
Game >> throwDiceAndCheckEffects [

	| throwResult maxThrow randomValue currentSpaceship |
	randomValue := Random new next.
	throwResult := dice throw.
	currentSpaceship := turnManager spaceshipPlaying.

	throwResult := aActiveDeck
		               applyEffectOn: throwResult
		               withCurrentSpaceship: currentSpaceship id.

	maxThrow := dice amountOfFaces.
	throwResult = maxThrow ifTrue: [
		randomValue < 0.8
			ifTrue: [ currentSpaceship changeCapacity: 1 ]
			ifFalse: [ currentSpaceship objectFuelTank useFuel: 1 ] ].
	^ throwResult
]

{ #category : #card }
Game >> usePermanentCard: aCard toDoEffectFor: anId [

	| currentSpaceshipCardHand cardInitialized currentSpaceship |
	currentSpaceship := turnManager spaceshipPlaying.
	cardInitialized := aCard toDoEffectFor: anId.
	currentSpaceshipCardHand := spaceshipsCardHands at:
		                            currentSpaceship id.
	(currentSpaceshipCardHand use: aCard) ifFalse: [ ^ self ].
	cardInitialized
		activateEffectOn: self
		forSpaceship: currentSpaceship id
]

{ #category : #results }
Game >> winner [

	^ (spaceships ranking at: 1) id
]
